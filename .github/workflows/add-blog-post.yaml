name: Add Blog Post
on:
  push:
    branches:
      - "main"
    paths:
      - "posts/**"
jobs:
  get-properties:
    name: Get Metadata from Post
    outputs:
      json: ${{ steps.metadata.outputs.json }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get specific changed files
        id: changed-files
        uses: tj-actions/changed-files@v1.0.0
        with:
          files: posts

      # Gets the line number where "<!--[PROPERTIES]" appears, reads $file from
      # that line number and removes the first and last line from selection
      # (because we don't want the opening and closing HTML tag in our YAML)

      # If an error occurs retrieving the line number for the [PROPERTIES] tag
      # (ie. it doesn't exist) - the step fails. Otherwise, we write the
      # selection to post-properties.yml
      - name: Read Post Properties and Write to File
        run: |
          for file in "${{ steps.changed-files.outputs.all_modified_files }}"; do
            echo "$file"
            export PROPERTIES=$(tail -n `grep -e "<\!--\[PROPERTIES\]" -n $file | awk -F ":" '{print "+"$1}'` $file | tail -n +2 | sed '$d' || exit 1)
            [ "$PROPERTIES" ] || (echo "Error occurred while processing blog properties for $file: ensure that the properties exist at the bottom of the blog file and are in the correct format." && exit 1)
            echo -e "$PROPERTIES" >> post-properties.yml
            echo $(cat post-properties.yml)
          done

      # Converts the post-properties.yml file created from the previous step
      # to JSON to be written into blogmap.json
      - name: Convert Post Properties to JSON
        uses: fabasoad/yaml-json-xml-converter-action@main
        id: yaml2json
        with:
          path: "post-properties.yml"
          from: "yaml"
          to: "json"

      - name: Write JSON Properties to File
        run: |
          cat <<EOF > post-properties.json
          ${{ steps.yaml2json.outputs.data }}
          EOF

      - id: metadata
        run: echo "::set-output name=json::`cat post-properties.json`"

  check-if-discussion-exists:
    name: Check If Discussion Already Exists
    outputs:
      exists: ${{ steps.metadata.outputs.exists }}
      slug: ${{ steps.metadata.outputs.slug }}
      did: ${{ steps.metadata.outputs.did }}
    runs-on: ubuntu-latest
    needs: get-properties
    steps:
      - uses: octokit/graphql-action@v2.x
        id: query_existing_discussion
        with:
          query: |
            query discussion($categoryid:ID!) {
              repository(owner: "Nevvulo", name: "blog") {
                discussions(categoryId: $categoryid, first: 100) {
                  nodes {
                    id
                    bodyText
                  }
                }
              }
            }
          categoryid: ${{ secrets.CATEGORY_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          cat <<EOF > json.temp
          ${{ needs.get-properties.outputs.json }}
          EOF

      - id: metadata
        run: |
          export JSON=$(cat json.temp)
          echo $JSON

          export SLUG=`echo $(echo "$JSON" | jq '.[][].slug')` 
          export DID=`echo $(echo "$JSON" | jq '.[][].discussionId')`
          if [[ "${{ steps.query_existing_discussion.outputs.data }}" == *"$SLUG"* ]]; then
            export EXISTS=true
          else
            export EXISTS=
          fi
          echo $SLUG
          echo $DID
          echo $EXISTS
          echo "::set-output name=slug::$SLUG"
          echo "::set-output name=did::$DID"
          echo "::set-output name=exists::$EXISTS"

  create-discussion:
    name: Create Discussion
    needs: [get-properties, check-if-discussion-exists]
    runs-on: ubuntu-latest
    outputs:
      discussion-id: ${{ steps.create_discussion.outputs.data }}
    steps:
      - run: |
          if [[ -n "${{ needs.check-if-discussion-exists.outputs.exists }}" ]]; then
            exit 0;
          fi
      - run: echo Discussion does not exist, creating
      - uses: octokit/graphql-action@v2.x
        id: create_discussion
        with:
          query: |
            mutation discussion($repoid:ID!,$categoryid:ID!,$body:String!) {
              createDiscussion(input: {repositoryId: $repoid, categoryId: $categoryid, body: $body, title: "post"}) {
                discussion {
                  id
                }
              }
            }
          repoid: ${{ secrets.REPO_ID }}
          categoryid: ${{ secrets.CATEGORY_ID }}
          body: ${{ needs.check-if-discussion-exists.outputs.slug }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_ID: ${{ secrets.REPO_ID }}
          CATEGORY_ID: ${{ secrets.CATEGORY_ID }}

      - run: "echo 'Created new discussion with ID: ${{ steps.create_discussion.outputs.data }}'"

  create-post:
    needs: [check-if-discussion-exists, create-discussion]
    name: Append New Post to blogmap.json
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ -z "${{ needs.create-discussion.outputs.discussion-id }}" ]]; then
            export DID="${{ needs.create-discussion.outputs.discussion-id }}"
          else
            export DID="${{ needs.check-if-discussion-exists.outputs.did }}"
          fi
          if [[  export "echo "

      # Removes entries in blogmap that have the same slug as any incoming
      # posts and adds properties for new post
      - run: |
          echo $(jq --slurpfile post post-properties.json 'del(.[] | select(.slug == $post[][].slug)) | . += [$post[][] + { discussionId: ''"'"$SLUG"'"'' }] | sort_by(.createdAt) | reverse' blogmap.json -c) > blogmap.json

      # Validates that blogmap.json was written with the correct contents
      - name: Validate File Size
        run: |
          minimumsize=100
          actualsize=$(wc -c <blogmap.json)
          if [ $actualsize -ge $minimumsize ]; then
              echo blogmap.json size is over $minimumsize bytes
          else
              echo blogmap.json size is under $minimumsize bytes
              exit 1
          fi

      - name: Validate JSON Schema
        uses: docker://orrosenblatt/validate-json-action:latest
        env:
          INPUT_SCHEMA: ./schema.json
          INPUT_JSONS: ./blogmap.json

  commit:
    needs: create-post
    name: Commit Changes
    runs-on: ubuntu-latest
    steps:
      - uses: EndBug/add-and-commit@v7 # You can change this to use a specific version.
        with:
          add: "blogmap.json"
          default_author: github_actions
          message: "Update blogmap.json"
          signoff: true
