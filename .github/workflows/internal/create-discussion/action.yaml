name: Create Discussion
description: 'Creates a discussion if it does not exist'
inputs:
  repo_id:
    required: true
    description: 'The ID of the repository'
  category_id:
    required: true
    description: 'The ID of the category to post discussion to'
  github_token:
    required: true
    description: 'GitHub token'
  title:
    required: true
    description: 'The title for the discussion'
  body:
    required: true
    description: 'The body for the discussion'

# Map the workflow outputs to job outputs
outputs:
  id:
    description: "The ID of the existing discussion"
    value: ${{ steps.get_ids.outputs.id }}
  number:
    description: "The public facing number of the existing discussion"
    value: ${{ steps.get_ids.outputs.number }}

runs:
  using: composite
  steps:
    - uses: octokit/graphql-action@v2.x
      id: create_discussion
      with:
        query: |
          mutation discussion($repoid:ID!,$categoryid:ID!,$body:String!,$title:String!) {
            createDiscussion(input: {repositoryId: $repoid, categoryId: $categoryid, body: $body, title: $title}) {
              discussion {
                id
                number
              }
            }
          }
        repoid: ${{ inputs.repo_id }}
        categoryid: ${{ inputs.category_id }}
        body: ${{ inputs.body }}
        title: ${{ inputs.title }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        REPO_ID: ${{ inputs.repo_id }}
        CATEGORY_ID: ${{ inputs.category_id }}

    - id: get_ids
      run: |
        cat <<EOF > temp.json
          ${{ steps.create_discussion.outputs.data }}
        EOF
        DID=$(cat temp.json | jq -r .createDiscussion.discussion.id)
        DNO=$(cat temp.json | jq -r .createDiscussion.discussion.number)
        echo "::set-output name=id::$DID"
        echo "::set-output name=number::$DNO"
        echo "Created new discussion with ID: $DID, number #$DNO"
      shell: bash
